
PandocBeautifier
  checks the availability of the right pandoc version

pdf utilities:
  adjusts the bounding box of a pdf file
  converts an excel sheet to pdf
  converts a powerpoint to pdf
  converts an excelsheet to cropped pdf
  converts a powerpoint to cropped pdf

TraceableSet
  should return a blank instance
  allows to add Traceables
  delivers the first of the duplicates
  advertises duplicates
  adertises undefined traceables
  advertises all traceables
  advertises a hash of supporting traces
  advertises traceable ids of a particular category
  advertises ttraceables of a particular category
  merges traceables
  exposes deleted Traceables
  exposes added Traceables
  exposes deleted Traceables of category
  exposes added Traceables of category
  exploses changed traceids as array of [Traceid, levensthein, diff_as_html]
  exposes unchanged Traceables
  can be marshalled to a file
  can be dumped to a graphml file

Traceable
  should == "id"
  should == "origin"
  should == "alternative_id"
  should == "header_plain"
  should == "\\textt{header_origin}"
  should == "body_plain"
  should == ["contributes_to"]
  should == "trace_orig"
  should == "origin"
  should == "category"
  should == "info"

Wortsammler generic issues
  provides a help
  runs silent
  reports version numbers
  turns on vervbose mode
  can create a new project folder
  does not initialize into an existing project folder
  controls the pandoc options by document class (FAILED - 1)

Wortsammler options validator
  rejects no processing

Wortsammler beautifier features
  beautifies all markdown files in a folder
  beautifies a single file
  recognizes if the specified manifest file is a directory
  beautifies input files in a manifest
  claims missing input
  claims undefined document path
  creates a semantically unchanged markdown file

Wortsammler conversion
  converts a single file to output format
  converts a single file to default output format
  handles chapters up to 6 levels
  handles lists up to 9 levels
  converts all files within a folder to output format
  processes a manifest
  investigates the existence of a manifest
  extracts the traceables according to a manifest
  extracts plantuml according to a manifest
  extracts plantuml from a single file
  extracts plantuml from a folder
  processes snippets (FAILED - 2)
  handles undefined snippets (FAILED - 3)
  runs the rake file in the sample document (FAILED - 4)
  compiles all documents

Wortsammler output formats
  generates dzslides
  generates beamer files
  generates markdown

Wortsammler syntax extensions
  [RS_Comp_012] supports embedded images
  TC_EXP_001 expands expected results from testcases
  TC_EXP_002 removes plantuml sources
  TC_EXP_003 handles Markdown inlays
  generates an index (FAILED - 5)
  reports TeX messages

Failures:

  1) Wortsammler generic issues controls the pandoc options by document class FIXED
     Expected pending 'implement test to control pandoc options by document class' to fail. No Error was raised.
     # ./spec/wortsammler_spec.rb:53

  2) Wortsammler conversion processes snippets FIXED
     Expected pending 'Test not yet implemented' to fail. No Error was raised.
     # ./spec/wortsammler_spec.rb:322

  3) Wortsammler conversion handles undefined snippets FIXED
     Expected pending 'Test not yet implemented' to fail. No Error was raised.
     # ./spec/wortsammler_spec.rb:326

  4) Wortsammler conversion runs the rake file in the sample document
     Failure/Error: Dir["testproject/30_Sources/ZGEN_Documents/*.*"].count.should==15

       expected: 15
            got: 19 (using ==)
     # ./spec/wortsammler_spec.rb:340:in `block (2 levels) in <top (required)>'

  5) Wortsammler syntax extensions generates an index
     Failure/Error: expect(result).to eq ref

       expected: "CONTENTS\n\nCONTENTS\n\nContents\n1 Das ist ein Test zur Indexerstellung 2\n\n1\n\nJanuary 5, 2019\n...er, 2 Äpfelchen, 2 Über, 2\n\n5\n\n\fINDEX\n\nINDEX\n\nende des Index\n\n6\n\nJanuary 5, 2019\n\n\f"
            got: "CONTENTS\n\nCONTENTS\n\nContents\n1 Das ist ein Test zur Indexerstellung 2\n\n1\n\nJanuary 5, 2019\n...er, 2 Äpfelchen, 2 Über, 2\n\n5\n\n\fINDEX\n\nINDEX\n\nende des Index\n\n6\n\nJanuary 5, 2019\n\n\f"

       (compared using ==)

       Diff:
       @@ -14,7 +14,7 @@
        DAS IST EIN TEST ZUR INDEXERSTELLUNG
        
        1 Das ist ein Test zur Indexerstellung
       -Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks oder Handgloves, um Schriften zu testen. Manchmal Sätze, die alle Buchstaben des Alphabets enthalten - man nennt diese Sätze »Pangrams«. Sehr bekannt ist dieser: The quick brown fox jumps over the lazy old dog. Oft werden in Typoblindtexte auch fremdsprachige Satzteile eingebaut (AVAIL® and WefoxTM are testing aussi la Kerning), um die Wirkung in anderen Sprachen zu testen. In Lateinisch sieht zum Beispiel fast jede Schrift gut aus. Quod erat demonstrandum. Seit 1975 fehlen in den meisten Testtexten die Zahlen, weswegen nach TypoGb. 204 § ab dem Jahr 2034 Zahlen in 86 der Texte zur Pflicht werden. Nichteinhaltung wird mit bis zu 245 oder 368 $ bestraft. Genauso wichtig in sind mittlerweile auch Âçcèñtë, die in neueren Schriften aber fast immer enthalten sind. Ein wichtiges aber schwierig zu integrierendes Feld sind OpenType-Funktionalitäten. Je nach Software und Voreinstellungen können eingebaute Kapitälchen, Kerning oder Ligaturen (sehr pfiffig) nicht richtig dargestellt werden.Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks
       +Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks oder Handgloves, um Schriften zu testen. Manchmal Sätze, die alle Buchstaben des Alphabets enthalten - man nennt diese Sätze »Pangrams«. Sehr bekannt ist dieser: The quick brown fox jumps over the lazy old dog. Oft werden in Typoblindtexte auch fremdsprachige Satzteile eingebaut (AVAIL® and WefoxTM are testing aussi la Kerning), um die Wirkung in anderen Sprachen zu testen. In Lateinisch sieht zum Beispiel fast jede Schrift gut aus. Quod erat demonstrandum. Seit 1975 fehlen in den meisten Testtexten die Zahlen, weswegen nach TypoGb. 204 § ab dem Jahr 2034 Zahlen in 86 der Texte zur Pflicht werden. Nichteinhaltung wird mit bis zu 245  oder 368 $ bestraft. Genauso wichtig in sind mittlerweile auch Âçcèñtë, die in neueren Schriften aber fast immer enthalten sind. Ein wichtiges aber schwierig zu integrierendes Feld sind OpenType-Funktionalitäten. Je nach Software und Voreinstellungen können eingebaute Kapitälchen, Kerning oder Ligaturen (sehr pfiffig) nicht richtig dargestellt werden.Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks
        
        2
        
       @@ -26,7 +26,7 @@
        
        DAS IST EIN TEST ZUR INDEXERSTELLUNG
        
       -Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks oder Handgloves, um Schriften zu testen. Manchmal Sätze, die alle Buchstaben des Alphabets enthalten - man nennt diese Sätze »Pangrams«. Sehr bekannt ist dieser: The quick brown fox jumps over the lazy old dog. Oft werden in Typoblindtexte auch fremdsprachige Satzteile eingebaut (AVAIL® and WefoxTM are testing aussi la Kerning), um die Wirkung in anderen Sprachen zu testen. In Lateinisch sieht zum Beispiel fast jede Schrift gut aus. Quod erat demonstrandum. Seit 1975 fehlen in den meisten Testtexten die Zahlen, weswegen nach TypoGb. 204 § ab dem Jahr 2034 Zahlen in 86 der Texte zur Pflicht werden. Nichteinhaltung wird mit bis zu 245 oder 368 $ bestraft. Genauso wichtig in sind mittlerweile auch Âçcèñtë, die in neueren Schriften aber fast immer enthalten sind. Ein wichtiges aber schwierig zu integrierendes Feld sind OpenType-Funktionalitäten. Je nach Software und Voreinstellungen können eingebaute Kapitälchen, Kerning oder Ligaturen (sehr pfiffig) nicht richtig dargestellt werden.Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks
       +Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks oder Handgloves, um Schriften zu testen. Manchmal Sätze, die alle Buchstaben des Alphabets enthalten - man nennt diese Sätze »Pangrams«. Sehr bekannt ist dieser: The quick brown fox jumps over the lazy old dog. Oft werden in Typoblindtexte auch fremdsprachige Satzteile eingebaut (AVAIL® and WefoxTM are testing aussi la Kerning), um die Wirkung in anderen Sprachen zu testen. In Lateinisch sieht zum Beispiel fast jede Schrift gut aus. Quod erat demonstrandum. Seit 1975 fehlen in den meisten Testtexten die Zahlen, weswegen nach TypoGb. 204 § ab dem Jahr 2034 Zahlen in 86 der Texte zur Pflicht werden. Nichteinhaltung wird mit bis zu 245  oder 368 $ bestraft. Genauso wichtig in sind mittlerweile auch Âçcèñtë, die in neueren Schriften aber fast immer enthalten sind. Ein wichtiges aber schwierig zu integrierendes Feld sind OpenType-Funktionalitäten. Je nach Software und Voreinstellungen können eingebaute Kapitälchen, Kerning oder Ligaturen (sehr pfiffig) nicht richtig dargestellt werden.Dies ist ein Typoblindtext. An ihm kann man sehen, ob alle Buchstaben da sind und wie sie aussehen. Manchmal benutzt man Worte wie Hamburgefonts, Rafgenduks
        
        3
        
     # ./spec/wortsammler_spec.rb:482:in `block (2 levels) in <top (required)>'

Finished in 3 minutes 9.5 seconds (files took 0.66312 seconds to load)
74 examples, 5 failures

Failed examples:

rspec ./spec/wortsammler_spec.rb:53 # Wortsammler generic issues controls the pandoc options by document class
rspec ./spec/wortsammler_spec.rb:322 # Wortsammler conversion processes snippets
rspec ./spec/wortsammler_spec.rb:326 # Wortsammler conversion handles undefined snippets
rspec ./spec/wortsammler_spec.rb:331 # Wortsammler conversion runs the rake file in the sample document
rspec ./spec/wortsammler_spec.rb:475 # Wortsammler syntax extensions generates an index

